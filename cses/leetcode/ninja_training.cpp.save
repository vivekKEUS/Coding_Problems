//first approach, using recurive approach with starting from n-1 day, when no task
//was initially selected
int f(int day,int last, vector<vector<int>> &points)
{
    int n = points.size();
    if(day==0)
    {
        int maxi = 0;
        for(int task = 0; task< 3;task++)
        {
            if(task!=last)
            {
                maxi = max(maxi,points[day][task]);
            }
        }
        return maxi;
    }
    else
    {
        int maxi = 0;
        for(int task = 0; task < 3; task++){
            if(task!=last){
                int point = points[day][task] + f(day-1,task,points);
                maxi = max(maxi,point);
            }
        }
        return maxi;
    }
}
int ninjaTraining(int n, vector<vector<int>> &points)
{
    return f(n-1,3,points);
}


//now improving upon this let's think of a memoized approach, since we are repeating 
//subproblems and calculating it again and again
int f(int day,int last, vector<vector<int>> &points, vector<vector<int>> &dp)
{
    if(dp[day][last]!=-1)
    {
        return dp[day][last];
    }
    if(day==0)
    {
        int maxi = 0;
        for(int task = 0; task< 3;task++)
        {
            if(task!=last)
            {
                maxi = max(maxi,points[day][task]);
            }
        }
        return dp[day][last] = maxi;
    }
    else
    {
        int maxi = 0;
        for(int task = 0; task < 3; task++){
            if(task!=last){
                int point = points[day][task] + f(day-1,task,points,dp);
                maxi = max(maxi,point);
            }
        }
        return dp[day][last] = maxi;
    }
}
int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<vector<int>> dp(n,vector<int>(4,-1)); //memoize
    return f(n-1,3,points, dp);
}


//now moving on to tabulation or DP approach

